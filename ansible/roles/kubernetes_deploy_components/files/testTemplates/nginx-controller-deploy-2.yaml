---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-controller-admin
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ingress-controller-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ingress-controller-admin
  namespace: kube-system

---
apiVersion: v1
kind: Secret
metadata:
  name: ca-key-pair
  namespace: kube-system
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVFVENDQXZtZ0F3SUJBZ0lVV01BV1NVUHdmaU1xeTdIaEpIUThMNjBFOWxZd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FqRUxNQWtHQTFVRUJoTUNUVVF4RVRBUEJnTlZCQWdUQ0VOb2FYTnBibUYxTVJFd0R3WURWUVFIRXdoRAphR2x6YVc1aGRURVRNQkVHQTFVRUNoTUtTM1ZpWlhKdVpYUmxjekVMTUFrR0ExVUVDeE1DUTBFeEV6QVJCZ05WCkJBTVRDa3QxWW1WeWJtVjBaWE13SGhjTk1Ua3hNakF6TVRVMU56QXdXaGNOTWpBeE1qQXlNVFUxTnpBd1dqQ0IKZ0RFTE1Ba0dBMVVFQmhNQ1RVUXhFVEFQQmdOVkJBZ1RDRU5vYVhOcGJtRjFNUkV3RHdZRFZRUUhFd2hEYUdsegphVzVoZFRFVk1CTUdBMVVFQ2hNTWMzbHpkR1Z0T201dlpHVnpNUk13RVFZRFZRUUxFd3BMZFdKbGNtNWxkR1Z6Ck1SOHdIUVlEVlFRREV4WnplWE4wWlcwNmJtOWtaVG94TUM0ekxqTXVNVFkwTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcktaa0dZUlZuc096QUgvamNXbm8wZmFCdmdhV29MaStpbVFmVERpVwpYWGFMK0lUYzFWVnI0LzMzOS84SzdQbTJvWjZWVlBHSTJqUlRRK3E0WkFUTWlXYkwxTXEwV3NvSDIrNmVnenVHCkxPbCt2Q2xScFU5NG5GVzJCQkI0NTFzbldyUEFZaTZqTFlJeUdUUjBwSlphd0xyZlJSMXRTTUI2QUFTNVB1NlkKbDF6T1hROUo4Q0FFbTUvdEwxQU5FVGZzUlE5Y05rM2N0SjZEZVRVOEJBNHhUOU1QcEFzMGZIUjUyWkpwYk1tYwpERTFYeVZwL3ZYWmI1T2pGZk41UWRxdFFzZWdFR3Q5MTU3NG4xaGk1UDlsM2VwNGVBZUxqNEI2djNwQlBmOUNKCnpqank3NzdmTHdmdDdmRFErMG1DMHYzY3ovajMyL3NuSStYTVBjN0VnK2RibndJREFRQUJvNEdYTUlHVU1BNEcKQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRApWUjBUQVFIL0JBSXdBREFkQmdOVkhRNEVGZ1FVREk3Y2tJYlVaY1lrWEJaMGlVaFhUZExXNHNnd0h3WURWUjBqCkJCZ3dGb0FVV01pK2ZtdGVvVnhtWTNnNnA4MzhBMC9Ndmc4d0ZRWURWUjBSQkE0d0RJY0VDZ01EcEljRUNnTUQKcERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWVUVEJiOUlaOERWNXBIMW80NEVBdlU5THpubGh3WmhtZ05DKwo1STg0elRYblFXd2ZJZDlvNm02YjhqVW1Ddm5TbDBSMGJ6TVh0emx2UXEzWThVOGt0dVRXeGxCTWwzRVh5SDBYCkluQkxWWmRoWVpyS0VtbitKd2FVdmpvWHMvcWFBM0E1czg5SmxRQzRwQlVXUXZKeHVUTUgyeVpaNW41Y0tpWjQKUnJLeTd1c25nczRnRGFFYUljT3p5dW9qRnZZUmFQejlNNUpxQWVyYys4NG02Q3Vsby9mRmVrckNrQmVzdmw5RAo2WnNWUy9Bc2xJdkZFWW1uWkpRSmw5MmJnemR1V2tpcmpJTzhGbWJEY0dreHc3ZUhobFR1WmFRQVg0ekxobFVQCkJsKzVpR2g2T2FvQ1NaWUlXMVFrNEpQRi9RQ1h2NmtaV2t5RTJid21jN09FeUFzZjBnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcktaa0dZUlZuc096QUgvamNXbm8wZmFCdmdhV29MaStpbVFmVERpV1hYYUwrSVRjCjFWVnI0LzMzOS84SzdQbTJvWjZWVlBHSTJqUlRRK3E0WkFUTWlXYkwxTXEwV3NvSDIrNmVnenVHTE9sK3ZDbFIKcFU5NG5GVzJCQkI0NTFzbldyUEFZaTZqTFlJeUdUUjBwSlphd0xyZlJSMXRTTUI2QUFTNVB1NllsMXpPWFE5Sgo4Q0FFbTUvdEwxQU5FVGZzUlE5Y05rM2N0SjZEZVRVOEJBNHhUOU1QcEFzMGZIUjUyWkpwYk1tY0RFMVh5VnAvCnZYWmI1T2pGZk41UWRxdFFzZWdFR3Q5MTU3NG4xaGk1UDlsM2VwNGVBZUxqNEI2djNwQlBmOUNKempqeTc3N2YKTHdmdDdmRFErMG1DMHYzY3ovajMyL3NuSStYTVBjN0VnK2RibndJREFRQUJBb0lCQUhTMEZMM2E0alZyZTdnKwp1bk9UYjdsZHM5M0xmazR1RXo1ZzUzY1NXVEhjVEVrMUprRmVlSXVveE5GeUtPUis5NkRRSFlsSnE0UTBFb1M2ClNPSHpESDlrYVN2eHlYQUZXTUtsemFoUHVDYnJ2cXRhRXNKM3NjT2JmR25LNks4YXdzTmc5ZzVvRUExWEVKNVIKQXZldVdySWtuMytNb0s2b3pNN3VZbm5UdG5tNU9kdlMwR3piM1I1SENCcUtwTTBzNGMxVEVNcU11aVoxcG1jcwphMCtKNFhST2lSZWc1R3ZSaUEvb3ppQ3MwMjd4UmF2SXU1azFNY2x2WXdDZVdOK1NPR0lXQU5Hc1I5bUg3dnh2CjhRUWRidHRHK2NxbktmQkVYQUh5Z0ZRZkVZZnJHSUJiQjJGYU5TRXBReTdCcWVUU2ZIcGEwbkhzY1ZUTmJmOHYKMmFPQ282RUNnWUVBMHplbURWWjJoS2JPS0NZVTloTFM1NDVlcVNDUWhka1g3ZFBkV1ZTaGJkZXhNdUw1YjZ4bwpGbVQ5NXhTSUlwU1VEaFBQdG1OWFM2VW5XTXg5MmZlZVZGSzFVNUwxNGkyZnVlbStMcUFDRW1pWndQeW1xSVJDCmFjUXpxMzlGZWxFVDVFaVB2eEE3QlU5S0JpYWo4RUtGV1dWVWRvdkUwczlTUStqMDZzWnB0aTBDZ1lFQTBVRm0KVExhZnFoc2V6SEpwY0g4YzdhSEtCWUVONmlEeERENnNOOTFlNzFvczFYdklLNEpTOWF4Z0FNQzRFOXJjUjlxVQo4QWtaSnQwU0FGa3R3MFlOMTJMS1NPNUlic2RSb0Z1NmdkRXpmY3lwUE1QejRNd01TRWtiK1hkNVdFTFlSRERjClNFck5iUXpJQWJxZFAwLzZORzFsdUViYlpobEZJZ3NnVFBrSXBIc0NnWUFUdFRhT09nb1crSVYxNDQvRElpQ0IKc0p3T2hkWldWdHBQdTV3RXNNdmJOdXYyeG96bHFaMlFzVjJyaVJQbXZoeE9iL1RLbk54UlY1aWpSWGxjdENrVwp6eHpTTG4wNDNHN3g1dWh5NjBVbU9KSllHbnJtY0dqTis1dWluZDU2dWtQejRmMWZvNEVPVHNhbWFrYVRyWEZKCjFSV2JkaEVvWm1YVHBsSHI4aFY5QlFLQmdBZFZqSGxaMlVURUNKTlAyMFEzSUZOdjNUM09KU2UwbWQ0OUFCcEIKSndlcW1IR3ZFZmY4YkYzeCtiZHRDY2FnWUNJZ2xpSEhuOXNOMm9pcWw0RUZub3lUQ05YL2pBaGQ4ZzExeVphdApOMm5NVjQ0cXJBeVAra282VGNHem4wd3BvNXpZUFpCSEZ1WWdrWTRGOVdiM3JhUlN4VUx0TU5sbVAxY1BIc1d6CjRNcXJBb0dCQUptUURKYklYcUYrQzVJUFhFcE9mRWpSckszRXlyMVpLMFhFcXY2elZVM2ZTNjN6cXp6WXlveGsKUmtYQ0VrYVpwOEdwS1VFU2RvVUp0bCtJU04yM2NDM3BtNk9vSWRwMlJDTXlIWEZDdWd4cmhUbWcrQ2VFam93cApaWUlZY0ZKbG9NdzZJMHN0Y29oR0ZCbVFvWUpIVVp4WjU3N1RGb2Nwb1BBS1ZHTkVDK2Y0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==

---
# Ingress Controller
apiVersion: extensions/v1beta1
#kind: DaemonSet
kind: Deployment
metadata:
  name: nginx-ingress-default
  namespace: kube-system
spec:
  replicas: 18
  selector:
    matchLabels:
      name: nginx-ingress-default
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: nginx-ingress-default
      name: nginx-ingress-default
      namespace: kube-system
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --apiserver-host=https://k8sm01.test.internal:6443
        - --enable-ssl-chain-completion=true
#        - --enable-ssl-chain-completion=false
        - --logtostderr
        - --configmap=$(POD_NAMESPACE)/nginx-ingress-config
        - --default-ssl-certificate=$(POD_NAMESPACE)/ca-key-pair
#        - --enable-dynamic-certificates=true
        - --v=10
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
#        - --default-ssl-certificate=$(POD_NAMESPACE)/nginx-controller-secret
#        - --default-ssl-certificate=$(POD_NAMESPACE)/default-tls
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.23.0
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 80
            scheme: HTTP
          initialDelaySeconds: 90
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: nginx-ingress-default
        ports:
        - containerPort: 443
          hostPort: 443
          protocol: TCP
        - containerPort: 80
          hostPort: 80
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 60
#      serviceAccountName: secret-tls-172
#      serviceAccountName: ingress-controller-admin
      terminationGracePeriodSeconds: 60

#> kubectl create secret tls nginx-controller-test --key ansible/certificate/k8s_access_roles/kubeadmin/admin-key.pem --cert ansible/certificate/k8s_access_roles/kubeadmin/admin.pem

## Example TLS Secret
#apiVersion: v1
#kind: Secret
#type: Opaque
#metadata:
#  name: test-tls
#  namespace: examples
#data:
#  tls.crt: # <base64-encoded cert>
#  tls.key: # <base64-encoded key>

# Example Ingress
#---
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: test-ingress
##  namespace: examples
#spec:
#  rules:
#  - host: k8sw01.test.internal
#    http:
#      paths:
#      - backend:
#          serviceName: test-svc
#          servicePort: 3000
#  tls:
#  - hosts:
#    - k8sw01.test.internal
#    secretName: nginx-controller-test


######################### APP ####################
---
piVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-http-backend
  labels:
    app: default-http-backend
  namespace: ingress-nginx
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  namespace: ingress-nginx
  labels:
    app: default-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-http-backend